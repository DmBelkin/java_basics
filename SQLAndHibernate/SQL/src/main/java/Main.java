import jakarta.persistence.criteria.CriteriaBuilder;import jakarta.persistence.criteria.CriteriaQuery;import jakarta.persistence.criteria.Root;import org.hibernate.*;import org.hibernate.boot.Metadata;import org.hibernate.boot.MetadataSources;import org.hibernate.boot.registry.StandardServiceRegistry;import org.hibernate.boot.registry.StandardServiceRegistryBuilder;import java.util.List;import java.util.stream.Collectors;public class Main {    public static void main(String[] args) {        try {            StandardServiceRegistry registry = new StandardServiceRegistryBuilder().                    configure("hibernate.cfg.xml").build();            Metadata metadata = new MetadataSources(registry).getMetadataBuilder().build();            SessionFactory factory = metadata.getSessionFactoryBuilder().build();            Session session = factory.openSession();            Transaction transaction = session.beginTransaction();            CriteriaBuilder builder = session.getCriteriaBuilder();            CriteriaQuery<PurchaseList> query = builder.createQuery(PurchaseList.class);            Root<PurchaseList> root = query.from(PurchaseList.class);            query.select(root);            List<PurchaseList> list = session.createQuery(query).getResultList();            for (PurchaseList purchase : list) {                LinkedPurchaseList linkedPurchaseList = new LinkedPurchaseList();                Students students = getStudentByName(purchase.getStudentName(), session, builder);                Course course = getCourseByName(purchase.getCourseName(), session, builder);                LinkedPurchaseListKey key = new LinkedPurchaseListKey();                key.setCourseId(course.getId());                key.setStudentId(students.getId());                linkedPurchaseList.setKey(key);                linkedPurchaseList.setCourseId(course.getId());                linkedPurchaseList.setStudentId(students.getId());                session.persist(linkedPurchaseList);            }            transaction.commit();            session.close();            factory.close();        } catch (Exception ex) {            ex.printStackTrace();        }    }    private static Students getStudentByName(String studentName, Session session, CriteriaBuilder builder) {        CriteriaQuery<Students> query = builder.createQuery(Students.class);        Root<Students> root = query.from(Students.class);        query.select(root);        List<Students> list = session.createQuery(query).getResultList();        return list.stream().filter(o -> o.getName().equals(studentName)).collect(Collectors.toList()).get(0);    }    private static Course getCourseByName(String courseName, Session session, CriteriaBuilder builder) {        CriteriaQuery<Course> query = builder.createQuery(Course.class);        Root<Course> root = query.from(Course.class);        query.select(root);        List<Course> list = session.createQuery(query).getResultList();        return list.stream().filter(o -> o.getName().equals(courseName)).collect(Collectors.toList()).get(0);    }}